/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { Suspense, useRef } from "react";
import {
  OrbitControls,
  Preload,
  useGLTF,
  PerspectiveCamera,
  Center,
} from "@react-three/drei";
import { Canvas, useThree } from "@react-three/fiber";
import CanvasLoader from "./CanvasLoader";

function Model(props) {
  const model = useGLTF("/gaming_desktop_pc/scene.gltf");
  const { viewport } = useThree();
  const scale = Math.max(viewport.width / 35, 0.6);
  return (
    <mesh scale={scale} position={[0, -2.5, -3]} onClick={props.onClick}>
      <hemisphereLight intensity={0.15} />
      <pointLight intensity={0.3} />
      <primitive object={model.scene} rotation={[0, (19 * Math.PI) / 12, 0]} />
    </mesh>
  );
}

export function CanvasModel() {
  const controlsRef = useRef(null);

  return (
    <Canvas frameloop="demand" gl={{ preserveDrawingBuffer: true }}>
      <PerspectiveCamera makeDefault position={[5, 5, 15]} fov={70} />
      <Suspense fallback={<CanvasLoader />}>
        <OrbitControls
          ref={controlsRef}
          enableZoom={false}
          maxPolarAngle={Math.PI / 2}
          minPolarAngle={Math.PI / 2}
          enablePan={false}
        />
        <Center>
          <Model />
        </Center>
      </Suspense>

      <Preload all />
    </Canvas>
  );
}
